{"remainingRequest":"C:\\ra_asy_syifa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\ra_asy_syifa\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\ra_asy_syifa\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ra_asy_syifa\\src\\components\\Hero.vue?vue&type=template&id=9d9a21ac&","dependencies":[{"path":"C:\\ra_asy_syifa\\src\\components\\Hero.vue","mtime":1678777422629},{"path":"C:\\ra_asy_syifa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678762640627},{"path":"C:\\ra_asy_syifa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1678762682846},{"path":"C:\\ra_asy_syifa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678762640627},{"path":"C:\\ra_asy_syifa\\node_modules\\vue-loader\\lib\\index.js","mtime":1678762642994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}